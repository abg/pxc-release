// Code generated by counterfeiter. DO NOT EDIT.
package diskfakes

import (
	"sync"

	sigar "github.com/cloudfoundry/gosigar"
	"github.com/cloudfoundry/migrate-to-pxc/disk"
)

type FakeSigar struct {
	GetFileSystemUsageStub        func(string) (sigar.FileSystemUsage, error)
	getFileSystemUsageMutex       sync.RWMutex
	getFileSystemUsageArgsForCall []struct {
		arg1 string
	}
	getFileSystemUsageReturns struct {
		result1 sigar.FileSystemUsage
		result2 error
	}
	getFileSystemUsageReturnsOnCall map[int]struct {
		result1 sigar.FileSystemUsage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSigar) GetFileSystemUsage(arg1 string) (sigar.FileSystemUsage, error) {
	fake.getFileSystemUsageMutex.Lock()
	ret, specificReturn := fake.getFileSystemUsageReturnsOnCall[len(fake.getFileSystemUsageArgsForCall)]
	fake.getFileSystemUsageArgsForCall = append(fake.getFileSystemUsageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFileSystemUsageStub
	fakeReturns := fake.getFileSystemUsageReturns
	fake.recordInvocation("GetFileSystemUsage", []interface{}{arg1})
	fake.getFileSystemUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSigar) GetFileSystemUsageCallCount() int {
	fake.getFileSystemUsageMutex.RLock()
	defer fake.getFileSystemUsageMutex.RUnlock()
	return len(fake.getFileSystemUsageArgsForCall)
}

func (fake *FakeSigar) GetFileSystemUsageCalls(stub func(string) (sigar.FileSystemUsage, error)) {
	fake.getFileSystemUsageMutex.Lock()
	defer fake.getFileSystemUsageMutex.Unlock()
	fake.GetFileSystemUsageStub = stub
}

func (fake *FakeSigar) GetFileSystemUsageArgsForCall(i int) string {
	fake.getFileSystemUsageMutex.RLock()
	defer fake.getFileSystemUsageMutex.RUnlock()
	argsForCall := fake.getFileSystemUsageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSigar) GetFileSystemUsageReturns(result1 sigar.FileSystemUsage, result2 error) {
	fake.getFileSystemUsageMutex.Lock()
	defer fake.getFileSystemUsageMutex.Unlock()
	fake.GetFileSystemUsageStub = nil
	fake.getFileSystemUsageReturns = struct {
		result1 sigar.FileSystemUsage
		result2 error
	}{result1, result2}
}

func (fake *FakeSigar) GetFileSystemUsageReturnsOnCall(i int, result1 sigar.FileSystemUsage, result2 error) {
	fake.getFileSystemUsageMutex.Lock()
	defer fake.getFileSystemUsageMutex.Unlock()
	fake.GetFileSystemUsageStub = nil
	if fake.getFileSystemUsageReturnsOnCall == nil {
		fake.getFileSystemUsageReturnsOnCall = make(map[int]struct {
			result1 sigar.FileSystemUsage
			result2 error
		})
	}
	fake.getFileSystemUsageReturnsOnCall[i] = struct {
		result1 sigar.FileSystemUsage
		result2 error
	}{result1, result2}
}

func (fake *FakeSigar) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileSystemUsageMutex.RLock()
	defer fake.getFileSystemUsageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSigar) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.Sigar = new(FakeSigar)
